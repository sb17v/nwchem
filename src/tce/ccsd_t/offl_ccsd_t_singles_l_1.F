C$Id$

c     Modifications (c) 2021 Advanced Micro Devices, Inc. All Rights Reserved.

C #ifndef VERY_VERBOSE
C #define VERY_VERBOSE   1
C #endif

C #ifndef DEBUG_TRIPLESX
C #define DEBUG_TRIPLESX 1
C #endif

#ifdef USE_OMP_TEAMS_DISTRIBUTE
#define TEAMS_DISTRIBUTE teams distribute
#else
#define TEAMS_DISTRIBUTE
#endif

#ifdef USE_OMP_SCHEDULE_STATIC_1
#define OMP_SCHEDULE schedule(static,1)
#else
#define OMP_SCHEDULE
#endif

#ifdef DEBUG_TRIPLESX
#ifndef OFFLOAD_CODE
      subroutine debug_triplesx_s(triplesx, l_triplesx)
      implicit none
      external offload_enabled
      logical offload_enabled
      integer l_triplesx
      integer it
      double precision triplesx(l_triplesx)
      double precision res
      res = 0d0
      if (offload_enabled()) then
!$omp target teams distribute parallel do map(tofrom:res)
        do it=1,l_triplesx
          res = res + triplesx(it)
        enddo
!$omp end target teams distribute parallel do
      else
        do it=1,l_triplesx
          res = res + triplesx(it)
        enddo
      endif
      write (*,*) 'res S triplesx:', res
      end
#endif
#endif

#ifdef OFFLOAD_CODE
#ifdef AOMP_MAPPING_FIXED
c     the mapping functions won't be needed
#else
      subroutine offl_sgl_map(array, sz)
        double precision array(sz)
        integer sz
!$omp target enter data map(to:array)
      end subroutine
      subroutine offl_sgl_unmap(array, sz)
        double precision array(sz)
        integer sz
!$omp target exit data map(from:array)
      end subroutine
#endif
#endif

#ifdef OFFLOAD_CODE
      SUBROUTINE offl_gpu_ccsd_t_singles_l_1(
#else
      SUBROUTINE offl_cpu_ccsd_t_singles_l_1(
#endif
     D     d_a,k_a_offset,
     &d_b,k_b_offset,triplesx,t_p4
     &b,t_p5b,t_p6b,t_h1b,t_h2b,t_h3b,
     V     v2sub,t1sub,scratch)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p4 p5 p6 h1 h2 h3 )_vt + = 1 * P( 9 ) * t ( p4 h1 )_t * v ( p5 p6 h2 h3 )_v
c
c elimination of the transpositions (kowalski,august,2009)
c
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
#include "offl.fh"
      double precision d_a(*)
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER t_p4b
      INTEGER t_p5b
      INTEGER t_p6b
      INTEGER t_h1b
      INTEGER t_h2b
      INTEGER t_h3b
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER dimc
      INTEGER p4b_1
      INTEGER h1b_1
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER h2b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a
      INTEGER k_a
c -- peta-exa --
      INTEGER a3(9,6)
      INTEGER ia6,ja6
c --------------
      DOUBLE PRECISION triplesx(*)
      INTEGER k_range_h3b_1
      INTEGER k_range_h2b_1
      INTEGER k_range_h1b_1
      INTEGER k_range_p6b_1
      INTEGER k_range_p5b_1
      INTEGER k_range_p4b_1
      double precision v2sub(*),t1sub(*),scratch(*)
C #ifdef OFFLOAD_CODE
      integer l_v2sub,l_t1sub,l_triplesx
C #endif
      integer ia6_in
cdbg      write(6,*) 'begin singles: sxalloc ',triplesx1_alloced
cfrom l_triplesx
      l_triplesx=
     c int_mb(k_range+t_h3b-1)*
     c int_mb(k_range+t_h2b-1)*
     c int_mb(k_range+t_h1b-1)*
     c int_mb(k_range+t_p6b-1)*
     c int_mb(k_range+t_p5b-1)*
     c int_mb(k_range+t_p4b-1)
      call ccsd_t_v2t1lgth(l_t1sub,l_v2sub)

#ifdef VERY_VERBOSE
      write (*, '(A)', advance="no") '.'
#endif
        a3(1,1)=t_p4b
        a3(1,2)=t_p5b
        a3(1,3)=t_p6b
        a3(1,4)=t_h1b
        a3(1,5)=t_h2b
        a3(1,6)=t_h3b
c
        a3(2,1)=t_p4b
        a3(2,2)=t_p5b
        a3(2,3)=t_p6b
        a3(2,4)=t_h2b
        a3(2,5)=t_h1b
        a3(2,6)=t_h3b
c
        a3(3,1)=t_p4b
        a3(3,2)=t_p5b
        a3(3,3)=t_p6b
        a3(3,4)=t_h3b
        a3(3,5)=t_h1b
        a3(3,6)=t_h2b
c
        a3(4,1)=t_p5b
        a3(4,2)=t_p4b
        a3(4,3)=t_p6b
        a3(4,4)=t_h1b
        a3(4,5)=t_h2b
        a3(4,6)=t_h3b
c
        a3(5,1)=t_p5b
        a3(5,2)=t_p4b
        a3(5,3)=t_p6b
        a3(5,4)=t_h2b
        a3(5,5)=t_h1b
        a3(5,6)=t_h3b
c
        a3(6,1)=t_p5b
        a3(6,2)=t_p4b
        a3(6,3)=t_p6b
        a3(6,4)=t_h3b
        a3(6,5)=t_h1b
        a3(6,6)=t_h2b
c
        a3(7,1)=t_p6b
        a3(7,2)=t_p4b
        a3(7,3)=t_p5b
        a3(7,4)=t_h1b
        a3(7,5)=t_h2b
        a3(7,6)=t_h3b
c
        a3(8,1)=t_p6b
        a3(8,2)=t_p4b
        a3(8,3)=t_p5b
        a3(8,4)=t_h2b
        a3(8,5)=t_h1b
        a3(8,6)=t_h3b
c
        a3(9,1)=t_p6b
        a3(9,2)=t_p4b
        a3(9,3)=t_p5b
        a3(9,4)=t_h3b
        a3(9,5)=t_h1b
        a3(9,6)=t_h2b
c
        do ia6=1,8
         if(a3(ia6,1).ne.0) then
         do ja6=ia6+1,9
          if((a3(ia6,1).eq.a3(ja6,1)).and.(a3(ia6,2).eq.a3(ja6,2))
     &     .and.(a3(ia6,3).eq.a3(ja6,3)).and.(a3(ia6,4).eq.a3(ja6,4))
     &     .and.(a3(ia6,5).eq.a3(ja6,5)).and.(a3(ia6,6).eq.a3(ja6,6)))
     &     then
           a3(ja6,1)=0
           a3(ja6,2)=0
           a3(ja6,3)=0
           a3(ja6,4)=0
           a3(ja6,5)=0
           a3(ja6,6)=0
          end if
         enddo 
         end if
        enddo 
c
cold      do ia6=1,9
#ifdef OFFLOAD_CODE
#ifdef AOMP_MAPPING_FIXED
!$omp target data map(tofrom:scratch(1:l_t1sub))
#else
      call offl_sgl_map(scratch, l_t1sub)
#endif
#endif
      do ia6_in=1+ga_nodeid(),9+ga_nodeid()
         ia6=mod(ia6_in,9)+1
      p4b=a3(ia6,1)
      p5b=a3(ia6,2)
      p6b=a3(ia6,3)
      h1b=a3(ia6,4)
      h2b=a3(ia6,5)
      h3b=a3(ia6,6)
cfrom l_triplesx
      k_range_h3b_1 = int_mb(k_range+h3b-1)
      k_range_h2b_1 = int_mb(k_range+h2b-1)
      k_range_h1b_1 = int_mb(k_range+h1b-1)
      k_range_p6b_1 = int_mb(k_range+p6b-1)
      k_range_p5b_1 = int_mb(k_range+p5b-1)
      k_range_p4b_1 = int_mb(k_range+p4b-1)

      if((p5b.le.p6b).and.(h2b.le.h3b).and.(p4b.ne.0)) then

      IF ((.not.restricted).or.(int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      dimc = k_range_p4b_1 * k_range_p5b_1 * k_range_p6b_1 *
     *        k_range_h1b_1 * k_range_h2b_1 * k_range_h3b_1
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p4b,h1b,p4b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p5b,p6b,h2b,h3b,p5b_2,p6b_2,h2b_2,h3b_2)
      dim_common = 1
      dima_sort = k_range_p4b_1 * k_range_h1b_1
      dima = dim_common * dima_sort
      dimb_sort = k_range_p5b_1 * k_range_p6b_1 * 
     *     k_range_h2b_1 * k_range_h3b_1
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      CALL GET_HASH_BLOCK_MA(d_a,scratch,dima,
     & int_mb(k_a_offset),(h1b_1 - 1 + noab * (p4b_1 - noab - 1)))
      CALL TCE_SORT_2(scratch,t1sub,k_range_p4b_1
     &,k_range_h1b_1,2,1,1.0d0)
#ifdef VERY_VERBOSE
      write (*,'(A)',advance="no") 't'
#endif
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,v2sub,dimb,
     &int_mb(k_b_offset),(h3b_2
     & - 1 + (noab+nvab) * (h2b_2 - 1 + (noab+nvab) * (p6b_2 - 1 + (noab
     &+nvab) * (p5b_2 - 1)))))
#ifdef VERY_VERBOSE
      write (*,'(A)',advance="no") 'v'
#endif
      else
      CALL GET_HASH_BLOCK_I(d_b,v2sub,dimb,
     &int_mb(k_b_offset),
     &(h3b_2
     & - 1 + (noab+nvab) * (h2b_2 - 1 + (noab+nvab) * (p6b_2 - 1 + (noab
     &+nvab) * (p5b_2 - 1)))),h3b_2,h2b_2,p6b_2,p5b_2)
#ifdef VERY_VERBOSE
      write (*,'(A)',advance="no") 'V'
#endif
      end if
#ifdef OFFLOAD_CODE
#ifdef AOMP_MAPPING_FIXED
!$omp target data map(to:t1sub(1:l_t1sub)) map(to:v2sub(1:l_v2sub))
#else
      call offl_sgl_map(t1sub, l_t1sub)
      call offl_sgl_map(v2sub, l_v2sub)
#endif
#endif
cfrom l_triplesx
      k_range_h3b_1 = int_mb(k_range+h3b-1)
      k_range_h2b_1 = int_mb(k_range+h2b-1)
      k_range_h1b_1 = int_mb(k_range+h1b-1)
      k_range_p6b_1 = int_mb(k_range+p6b-1)
      k_range_p5b_1 = int_mb(k_range+p5b-1)
      k_range_p4b_1 = int_mb(k_range+p4b-1)
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN

#ifdef OFFLOAD_CODE
      call offl_gpu_sd_t_s1_1(
#else
      call offl_cpu_sd_t_s1_1(
#endif
     H        k_range_h3b_1,k_range_h2b_1,
     1               k_range_h1b_1,k_range_p6b_1,
     2               k_range_p5b_1,k_range_p4b_1,
     4               triplesx,t1sub,v2sub)

      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &3b)) THEN
#ifdef OFFLOAD_CODE
      call offl_gpu_sd_t_s1_2(
#else
      call offl_cpu_sd_t_s1_2(
#endif
     I        k_range_h3b_1,k_range_h2b_1,
     1               k_range_h1b_1,k_range_p6b_1,
     2               k_range_p5b_1,k_range_p4b_1,
     4               triplesx,t1sub,v2sub)

      END IF
      IF ((t_p4b .eq. p4b) .and. (t_p5b .eq. p5b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &1b)) THEN
#ifdef OFFLOAD_CODE
      call offl_gpu_sd_t_s1_3(
#else
      call offl_cpu_sd_t_s1_3(
#endif
     I        k_range_h3b_1,k_range_h2b_1,
     1               k_range_h1b_1,k_range_p6b_1,
     2               k_range_p5b_1,k_range_p4b_1,
     4               triplesx,t1sub,v2sub)

      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
#ifdef OFFLOAD_CODE
      call offl_gpu_sd_t_s1_4(
#else
      call offl_cpu_sd_t_s1_4(
#endif
     I        k_range_h3b_1,k_range_h2b_1,
     1               k_range_h1b_1,k_range_p6b_1,
     2               k_range_p5b_1,k_range_p4b_1,
     4               triplesx,t1sub,v2sub)

      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &3b)) THEN
#ifdef OFFLOAD_CODE
      call offl_gpu_sd_t_s1_5(
#else
      call offl_cpu_sd_t_s1_5(
#endif
     I        k_range_h3b_1,k_range_h2b_1,
     1               k_range_h1b_1,k_range_p6b_1,
     2               k_range_p5b_1,k_range_p4b_1,
     4               triplesx,t1sub,v2sub)

      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p4b) .and. (t_p6b .eq. p6b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &1b)) THEN
#ifdef OFFLOAD_CODE
      call offl_gpu_sd_t_s1_6(
#else
      call offl_cpu_sd_t_s1_6(
#endif
     I        k_range_h3b_1,k_range_h2b_1,
     1               k_range_h1b_1,k_range_p6b_1,
     2               k_range_p5b_1,k_range_p4b_1,
     4               triplesx,t1sub,v2sub)

      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p4b)
     & .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h2b) .and. (t_h3b .eq. h
     &3b)) THEN
#ifdef OFFLOAD_CODE
      call offl_gpu_sd_t_s1_7(
#else
      call offl_cpu_sd_t_s1_7(
#endif
     I        k_range_h3b_1,k_range_h2b_1,
     1               k_range_h1b_1,k_range_p6b_1,
     2               k_range_p5b_1,k_range_p4b_1,
     4               triplesx,t1sub,v2sub)

      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p4b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h1b) .and. (t_h3b .eq. h
     &3b)) THEN
#ifdef OFFLOAD_CODE
      call offl_gpu_sd_t_s1_8(
#else
      call offl_cpu_sd_t_s1_8(
#endif
     I        k_range_h3b_1,k_range_h2b_1,
     1               k_range_h1b_1,k_range_p6b_1,
     2               k_range_p5b_1,k_range_p4b_1,
     4               triplesx,t1sub,v2sub)

      END IF
      IF ((t_p4b .eq. p5b) .and. (t_p5b .eq. p6b) .and. (t_p6b .eq. p4b)
     & .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h3b) .and. (t_h3b .eq. h
     &1b)) THEN
#ifdef OFFLOAD_CODE
      call offl_gpu_sd_t_s1_9(
#else
      call offl_cpu_sd_t_s1_9(
#endif
     I        k_range_h3b_1,k_range_h2b_1,
     1               k_range_h1b_1,k_range_p6b_1,
     2               k_range_p5b_1,k_range_p4b_1,
     4               triplesx,t1sub,v2sub)

      END IF
#ifdef OFFLOAD_CODE
#ifdef AOMP_MAPPING_FIXED
c     umap(to:t1sub(1:l_t1sub)) umap(to:v2sub(1:l_v2sub))
!$omp end target data
#else
      call offl_sgl_unmap(t1sub, l_t1sub)
      call offl_sgl_unmap(v2sub, l_v2sub)
#endif
#endif
c 
      END IF
      END IF
      END IF
c
      END IF
      END IF
      END IF
cskip      END IF
c
      END IF
      END DO
#ifdef OFFLOAD_CODE
#ifdef AOMP_MAPPING_FIXED
c     unmap(tofrom:scratch(1:l_t1sub))
!$omp end target data
#else
      call offl_sgl_unmap(scratch, l_t1sub)
#endif
#endif
#ifdef DEBUG_TRIPLESX
      call debug_triplesx_s(triplesx, l_triplesx)
#endif
      RETURN
      END
c
#ifdef OFFLOAD_CODE
      subroutine offl_gpu_sd_t_s1_1(
#else
      subroutine offl_cpu_sd_t_s1_1(
#endif
     H     h3d,h2d,h1d,p6d,p5d,p4d,
     2               triplesx,t1sub,v2sub)
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d
      integer h3h2,h1,p6,p5,p4
      double precision triplesx(h3d*h2d,h1d,p6d,p5d,p4d)
      double precision t1sub(p4d,h1d)
      double precision v2sub(h3d*h2d,p6d,p5d)
#include "sd1_top2.fh"
#ifdef OFFLOAD_CODE
#ifdef VERY_VERBOSE
      write (*, '(A)', advance="no") 'A'
#endif
!$omp target map(to:t1sub) map(to:v2sub)
!$omp TEAMS_DISTRIBUTE parallel do private(p4,p5,p6,h1,h3h2)
!$omp&collapse(OMPCOLLAPSE) OMP_SCHEDULE
#else
!$omp parallel do private(p4,p5,p6,h1,h3h2) collapse(OMPCOLLAPSE)
#endif
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=900, MIN=30
      do h3h2=1,h2d*h3d
       triplesx(h3h2,h1,p6,p5,p4)=triplesx(h3h2,h1,p6,p5,p4)
     1   + t1sub(p4,h1)*v2sub(h3h2,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
#ifdef OFFLOAD_CODE
!$omp end TEAMS_DISTRIBUTE parallel do
!$omp end target
#else
!$omp end parallel do
#endif
#include "sd_bottom.fh"
      return
      end
c
#ifdef OFFLOAD_CODE
      subroutine offl_gpu_sd_t_s1_2(
#else
      subroutine offl_cpu_sd_t_s1_2(
#endif
     H     h3d,h2d,h1d,p6d,p5d,p4d,
     2               triplesx,t1sub,v2sub)
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d
      integer h3,h2,h1,p6,p5,p4
      double precision triplesx(h3d,h1d,h2d,p6d,p5d,p4d)
      double precision t1sub(p4d,h1d)
      double precision v2sub(h3d,h2d,p6d,p5d)
#include "sd1_top.fh"
#ifdef OFFLOAD_CODE
#ifdef VERY_VERBOSE
       write (*, '(A)', advance="no") 'B'
#endif
!$omp target
!$omp TEAMS_DISTRIBUTE parallel do private(p4,p5,p6,h2,h3,h1)
!$omp&collapse(OMPCOLLAPSE) OMP_SCHEDULE
#else
!$omp parallel do private(p4,p5,p6,h2,h3,h1) collapse(OMPCOLLAPSE)
#endif
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h2=1,h2d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=10
      do h3=1,h3d
       triplesx(h3,h1,h2,p6,p5,p4)=triplesx(h3,h1,h2,p6,p5,p4)
     1   - t1sub(p4,h1)*v2sub(h3,h2,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
#ifdef OFFLOAD_CODE
!$omp end TEAMS_DISTRIBUTE parallel do
!$omp end target
#else
!$omp end parallel do
#endif
#include "sd_bottom.fh"
      return
      end
c
#ifdef OFFLOAD_CODE
      subroutine offl_gpu_sd_t_s1_3(
#else
      subroutine offl_cpu_sd_t_s1_3(
#endif
     H     h3d,h2d,h1d,p6d,p5d,p4d,
     2               triplesx,t1sub,v2sub)
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d
      integer h3h2,h1,p6,p5,p4
      double precision triplesx(h1d,h3d*h2d,p6d,p5d,p4d)
      double precision t1sub(p4d,h1d)
      double precision v2sub(h3d*h2d,p6d,p5d)
#include "sd1_top2.fh"
#ifdef OFFLOAD_CODE
#ifdef VERY_VERBOSE
       write (*, '(A)', advance="no") 'C'
#endif
!$omp target
!$omp TEAMS_DISTRIBUTE parallel do private(p4,p5,p6,h1,h3h2)
!$omp&collapse(OMPCOLLAPSE) OMP_SCHEDULE
#else
!$omp parallel do private(p4,p5,p6,h1,h3h2) collapse(OMPCOLLAPSE)
#endif
      do p4=1,p4d
      do p5=1,p5d
      do p6=1,p6d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=900, MIN=30
      do h3h2=1,h3d*h2d
       triplesx(h1,h3h2,p6,p5,p4)=triplesx(h1,h3h2,p6,p5,p4)
     1   + t1sub(p4,h1)*v2sub(h3h2,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
#ifdef OFFLOAD_CODE
!$omp end TEAMS_DISTRIBUTE parallel do
!$omp end target
#else
!$omp end parallel do
#endif
#include "sd_bottom.fh"
      return
      end
c
#ifdef OFFLOAD_CODE
      subroutine offl_gpu_sd_t_s1_4(
#else
      subroutine offl_cpu_sd_t_s1_4(
#endif
     H     h3d,h2d,h1d,p6d,p5d,p4d,
     2               triplesx,t1sub,v2sub)
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d
      integer h3h2,h1,p6,p5,p4
      double precision triplesx(h3d*h2d,h1d,p6d,p4d,p5d)
      double precision t1sub(p4d,h1d)
      double precision v2sub(h3d*h2d,p6d,p5d)
#include "sd1_top2.fh"
#ifdef OFFLOAD_CODE
#ifdef VERY_VERBOSE
       write (*, '(A)', advance="no") 'D'
#endif
!$omp target
!$omp TEAMS_DISTRIBUTE parallel do private(p4,p5,p6,h1,h3h2)
!$omp&collapse(OMPCOLLAPSE) OMP_SCHEDULE
#else
!$omp parallel do private(p4,p5,p6,h1,h3h2) collapse(OMPCOLLAPSE)
#endif
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=900, MIN=30
      do h3h2=1,h3d*h2d
       triplesx(h3h2,h1,p6,p4,p5)=triplesx(h3h2,h1,p6,p4,p5)
     1   - t1sub(p4,h1)*v2sub(h3h2,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
#ifdef OFFLOAD_CODE
!$omp end TEAMS_DISTRIBUTE parallel do
!$omp end target
#else
!$omp end parallel do
#endif
#include "sd_bottom.fh"
      return
      end
c
#ifdef OFFLOAD_CODE
      subroutine offl_gpu_sd_t_s1_5(
#else
      subroutine offl_cpu_sd_t_s1_5(
#endif
     H     h3d,h2d,h1d,p6d,p5d,p4d,
     2               triplesx,t1sub,v2sub)
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d
      integer h3,h2,h1,p6,p5,p4
      double precision triplesx(h3d,h1d,h2d,p6d,p4d,p5d)
      double precision t1sub(p4d,h1d)
      double precision v2sub(h3d,h2d,p6d,p5d)
#include "sd1_top.fh"
#ifdef OFFLOAD_CODE
#ifdef VERY_VERBOSE
       write (*, '(A)', advance="no") 'E'
#endif
!$omp target
!$omp TEAMS_DISTRIBUTE parallel do private(p4,p5,p6,h2,h3,h1)
!$omp&collapse(OMPCOLLAPSE) OMP_SCHEDULE
#else
!$omp parallel do private(p4,p5,p6,h2,h3,h1) collapse(OMPCOLLAPSE)
#endif
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h2=1,h2d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=10
      do h3=1,h3d
       triplesx(h3,h1,h2,p6,p4,p5)=triplesx(h3,h1,h2,p6,p4,p5)
     1   + t1sub(p4,h1)*v2sub(h3,h2,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
#ifdef OFFLOAD_CODE
!$omp end TEAMS_DISTRIBUTE parallel do
!$omp end target
#else
!$omp end parallel do
#endif
#include "sd_bottom.fh"
      return
      end
c
#ifdef OFFLOAD_CODE
      subroutine offl_gpu_sd_t_s1_6(
#else
      subroutine offl_cpu_sd_t_s1_6(
#endif
     H     h3d,h2d,h1d,p6d,p5d,p4d,
     2               triplesx,t1sub,v2sub)
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d
      integer h3h2,h1,p6,p5,p4
      double precision triplesx(h1d,h3d*h2d,p6d,p4d,p5d)
      double precision t1sub(p4d,h1d)
      double precision v2sub(h3d*h2d,p6d,p5d)
#include "sd1_top2.fh"
#ifdef OFFLOAD_CODE
#ifdef VERY_VERBOSE
       write (*, '(A)', advance="no") 'F'
#endif
!$omp target
!$omp TEAMS_DISTRIBUTE parallel do private(p4,p5,p6,h1,h3h2)
!$omp&collapse(OMPCOLLAPSE) OMP_SCHEDULE
#else
!$omp parallel do private(p4,p5,p6,h1,h3h2) collapse(OMPCOLLAPSE)
#endif
      do p5=1,p5d
      do p4=1,p4d
      do p6=1,p6d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=900, MIN=30
      do h3h2=1,h3d*h2d
       triplesx(h1,h3h2,p6,p4,p5)=triplesx(h1,h3h2,p6,p4,p5)
     1   - t1sub(p4,h1)*v2sub(h3h2,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
#ifdef OFFLOAD_CODE
!$omp end TEAMS_DISTRIBUTE parallel do
!$omp end target
#else
!$omp end parallel do
#endif
#include "sd_bottom.fh"
      return
      end
c
#ifdef OFFLOAD_CODE
      subroutine offl_gpu_sd_t_s1_7(
#else
      subroutine offl_cpu_sd_t_s1_7(
#endif
     H     h3d,h2d,h1d,p6d,p5d,p4d,
     2               triplesx,t1sub,v2sub)
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d
      integer h3h2,h1,p6,p5,p4
      double precision triplesx(h3d*h2d,h1d,p4d,p6d,p5d)
      double precision t1sub(p4d,h1d)
      double precision v2sub(h3d*h2d,p6d,p5d)
#include "sd1_top2.fh"
#ifdef OFFLOAD_CODE
#ifdef VERY_VERBOSE
       write (*, '(A)', advance="no") 'G'
#endif
!$omp target
!$omp TEAMS_DISTRIBUTE parallel do private(p4,p5,p6,h1,h3h2)
!$omp&collapse(OMPCOLLAPSE) OMP_SCHEDULE
#else
!$omp parallel do private(p4,p5,p6,h1,h3h2) collapse(OMPCOLLAPSE)
#endif
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=900, MIN=30
      do h3h2=1,h3d*h2d
       triplesx(h3h2,h1,p4,p6,p5)=triplesx(h3h2,h1,p4,p6,p5)
     1   + t1sub(p4,h1)*v2sub(h3h2,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
#ifdef OFFLOAD_CODE
!$omp end TEAMS_DISTRIBUTE parallel do
!$omp end target
#else
!$omp end parallel do
#endif
#include "sd_bottom.fh"
      return
      end
c
#ifdef OFFLOAD_CODE
      subroutine offl_gpu_sd_t_s1_8(
#else
      subroutine offl_cpu_sd_t_s1_8(
#endif
     H     h3d,h2d,h1d,p6d,p5d,p4d,
     2               triplesx,t1sub,v2sub)
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d
      integer h3,h2,h1,p6,p5,p4
      double precision triplesx(h3d,h1d,h2d,p4d,p6d,p5d)
      double precision t1sub(p4d,h1d)
      double precision v2sub(h3d,h2d,p6d,p5d)
#include "sd1_top.fh"
#ifdef OFFLOAD_CODE
#ifdef VERY_VERBOSE
       write (*, '(A)', advance="no") 'H'
#endif
!$omp target
!$omp TEAMS_DISTRIBUTE parallel do private(p4,p5,p6,h2,h3,h1)
!$omp&collapse(OMPCOLLAPSE) OMP_SCHEDULE
#else
!$omp parallel do private(p4,p5,p6,h2,h3,h1) collapse(OMPCOLLAPSE)
#endif
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h2=1,h2d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=40, MIN=10
      do h3=1,h3d
       triplesx(h3,h1,h2,p4,p6,p5)=triplesx(h3,h1,h2,p4,p6,p5)
     1   - t1sub(p4,h1)*v2sub(h3,h2,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
      enddo
#ifdef OFFLOAD_CODE
!$omp end TEAMS_DISTRIBUTE parallel do
!$omp end target
#else
!$omp end parallel do
#endif
#include "sd_bottom.fh"
      return
      end
c
#ifdef OFFLOAD_CODE
      subroutine offl_gpu_sd_t_s1_9(
#else
      subroutine offl_cpu_sd_t_s1_9(
#endif
     H     h3d,h2d,h1d,p6d,p5d,p4d,
     2               triplesx,t1sub,v2sub)
      IMPLICIT NONE
      integer h3d,h2d,h1d,p6d,p5d,p4d
      integer h3h2,h1,p6,p5,p4
      double precision triplesx(h1d,h3d*h2d,p4d,p6d,p5d)
      double precision t1sub(p4d,h1d)
      double precision v2sub(h3d*h2d,p6d,p5d)
#include "sd1_top2.fh"
#ifdef OFFLOAD_CODE
#ifdef VERY_VERBOSE
       write (*, '(A)', advance="no") 'I'
#endif
!$omp target
!$omp TEAMS_DISTRIBUTE parallel do private(p4,p5,p6,h1,h3h2)
!$omp&collapse(OMPCOLLAPSE) OMP_SCHEDULE
#else
!$omp parallel do private(p4,p5,p6,h1,h3h2) collapse(OMPCOLLAPSE)
#endif
      do p5=1,p5d
      do p6=1,p6d
      do p4=1,p4d
      do h1=1,h1d
!DEC$ LOOP COUNT MAX=900, MIN=30
      do h3h2=1,h3d*h2d
       triplesx(h1,h3h2,p4,p6,p5)=triplesx(h1,h3h2,p4,p6,p5)
     1   + t1sub(p4,h1)*v2sub(h3h2,p6,p5)
      enddo
      enddo
      enddo
      enddo
      enddo
#ifdef OFFLOAD_CODE
!$omp end TEAMS_DISTRIBUTE parallel do
!$omp end target
#else
!$omp end parallel do
#endif
#include "sd_bottom.fh"
      return
      end
#ifndef OFFLOAD_CODE
#ifdef USE_OFFLOAD
#define OFFLOAD_CODE
c
c     Compile source again for offload code
c
#include "offl_ccsd_t_singles_l_1.F"
#endif
#endif

